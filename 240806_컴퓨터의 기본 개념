1. 컴퓨터의 개념
1) 컴퓨터란?
· 계산을 수행하는 장치
· 데이터 입력 → 처리 → 출력 또는 저장
· 데이터(data)를 입력 받아 처리하면 의미있는 자료가 되는데 이를 정보라 부름
· 가공되지 않은 순수 데이터: Raw Data
2) 정보통신 기술이란?
· 정보(Information): 컴퓨터가 처리한 의미있는 자료
· 정보 기술(IT: Information Technology): 데이터를 가공하여 가치있는 정보로 만드는 모든 기술
· 정보 통신 기술: 정보 기술 + 통신 기술


2. 컴퓨터의 구성
1) 하드웨어: 컴퓨터를 구성하는 기계 장치
 · 필수 장치: CPU, 메모리
 · 주변 장치: 입력 장치(키보드, 마우스), 출력 장치(프린트기, 모니터), 저장 장치(CD, 하드디스크)
2) 소프트웨어: 하드웨어를 작동하려고 만든 알고리즘을 프로그램 형태로 제작한 것


3. 컴퓨터의 동작 원리_요리로 비유
 · 주방장은 CPU
 · 요리를 하는 작업대는 Ram (메인 메모리)
 · 재료를 보관하는 창고는 저장 장치
 · 주방장을 돕는 보조 요리사는 GPU
 · 재료를 가져오는 주방 보조는 입출력 관리자


4. 인터페이스(GUI)란?
 · Graphical User Interface의 약자
 · 사용자가 편리하게 사용할 수 있도록 기능을 알기 쉬운 아이콘, 메뉴, 버튼 등의 그래픽으로 나타낸 것


5. 프로그래밍과 알고리즘
1) 프로그래밍이란?
 · 컴퓨터에 작업을 지시하는 것
 · 컴퓨터가 일반 계산기와 다른 점은 프로그래밍을 할 수 있다는 것
2) 알고리즘이란?
 · 어떤 문제를 해결하고자 전략을 세우는 것
 · 컴퓨터는 기계이기 때문에 작업에 필요한 알고리즘을 프로그래밍을 해서 알려 주어야 함
3) 컴퓨터에 작업을 내리는 과정
 · 알고리즘 작성 → 프로그래밍 → 실행 및 테스트 → 정상 작동
 · 알고리즘 작성 → 프로그래밍 → 실행 및 테스트 → 오류 발생 → 디버깅 → 프로그래밍 → 실행 및 테스트 → 정상 작동
 ※ 디버깅이란? 오류 발생 시, 프로그램을 수정, 프로그램 내에 있는 버그(bug)를 잡아 없앤다는 의미
 ※ 오류가 발생하는 이유? 
  · 문법 오류: 여러 가지 오류 중 가장 간단
  · 논리적인 오류: 알고리즘을 잘못 만들었기 때문에 발생, 가장 고치기 어려움
  · 따라서,, TDD(Test Driven Developement) 방식을 사용하기도 함 > 테스트를 먼저 시행하고, 정상이면 개발하는 방식

 
6. 용량 단위
1) 비트(bit)
 · 컴퓨터에서 데이터를 표시할 때 사용하는 최소 단위
 · 2진법을 사용하기 때문에 1비트로 표현할 수 있는 수는 0과 1
2) 바이트(byte)
 · 비트 8개를 묶어 사용하는 단위
 · 8비트 = 1바이트
 · 32비트 CPU와 64비트 CPU 사용
3) 큰 용량을 표현하는 단위
 · 바이트(B) - 킬로(KB) - 메가(MB) - 기가(GB) - 테라(TB) - 페타(PB) - 엑사 - 제타 - 요타


7. 진법의 종류와 변환
 1) 2진법
 · 컴퓨터는 0과 1로 표현하는 2진법 사용
 · 빠르게 계산하려면 2진법을 사용하는 것이 유리하기 때문
 2) 10진법 
 · 사람은 0부터 9까지 숫자 10개로 표현하는 10진법 사용
 · 10진법 표현: 237 = 2x10² + 3x10¹ + 7x10⁰   = 2x100 + 3x10 + 7x1
 3) 10진법 → 2진법 변환 방법
 · 10진수를 2로 나누면서 몪은 아래에, 나머지는 우측에 기록한 후, 더 이상 나누어지지 않을 때 나머지를 거꾸로 읽음
 <img width="314" alt="7 10진법, 2진법 변환" src="https://github.com/user-attachments/assets/592394ac-532c-4699-bae7-a5648426e5b4">
 4) 16진법 
 · 0~F까지 숫자 16개를 사용
 · 1~9는 10진수와 동일하며, 이후 숫자 6개는 알파벳 사용(10=A, 11=B, 12=C, 13=D, 14=E, 15=F)
 · 16진법을 사용하는 이유? 2진수로 11111111 표현하려면 8자리가 필요, 16진수로 표현하면 FF, 2자리로 표현 가능
 · ex) 색상을 표현할 때 사용, RGB(255, 255, 255)


8. 보수를 이용한 연산
1) 1의 보수를 이용한 뺄셈 연산
 · 작은 수에 1의 보수를 취함 → 큰 수에 1의 보수를 더함 → 이 때 발생하는 최종 자리올림을 결과의 최하위비트에 더함
2) 2의 보수를 이용한 뺄셈 연산
 · 작은 수에 2의 보수를 취함 → 큰 수에 2의 보수를 더함 → 자리올림 무시


9. 아스키코드와 Parity Check
1) 아스키코드
 · 문자를 처리하기 위함으로 숫자와 문자를 하나씩 대응하는 코드를 사용, 아스키코드가 대표적
 · 7비트로 구성, 아스키코드로 표현할 수 있는 문자는 0~127, 총 128(2⁷)개
 · 1byte(8비트) = 아스키코드(7비트) + 패리티(1비트) → 아스키코드가 7비트만 쓰도록 지정된 이유! 패리티 비트를 통해 통신 에러 검출을 하기 위함
2) Parity Check
 · 패리티 비트는 프레임의 각 문자 끝에 추가
 · 짝수 패리티(Even Parity)와 홀수 패리티(Odd Parity)로 구분하여 사용
   → 짝수 패리티를 사용한 경우 11000010, 홀수 패리티를 사용한 경우 11000011

 
10. 유니코드와 UTF-8
1) 유니코드
 · 전 세계 모든 문자를 일관되게 표현하고 다룰 수 있도록 설계된 산업 표준 문자 코드
 · 한글은 최소 2바이트 필요: '가'의 유니코드 값은 AC00 → 16진법, AC 1byte + 00 1byte 차지
2) UTF-8
 · 아스키코드와 호환 가능하며, 일반적으로 한글을 표현할 때 사용
 · 가변형 인코딩 방식으로 1~4byte를 차지, 아래와 같은 사유로 크기가 가변형이 될 수 있음 
   → 아스키코드 1byte + 자음 1byte + 모음 1byte = 3byte
   → 아스키코드 1byte + 자음 1byte + 모음 1byte + 받침 1byte = 4byte
 · 개발자마다 문자 표현 방식을 다르게 사용하는 경우, 글자 깨짐 현상이 발생하므로 동일하게 셋팅하는게 중요!

 ※ 인코딩이란? 컴퓨터가 이해할 수 있는 형태로 변환
 ※ 디코딩이란? 사용자가 이해할 수 있는 형태로 변환

