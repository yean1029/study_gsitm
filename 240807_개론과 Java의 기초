1. 정수 표현
1) 컴퓨터에서의 정수 표현
· 정수는 일반적으로 음수, 양수, 0으로 구분
· 음수는 1의 보수 또는 2의 보수로 표현
  ※ 2의 보수는 1의 보수에 1을 더한 값
2) 자바에서의 정수 표현
· byte(1byte): -128~127 (-2⁷, 2⁷-1)
· short(2byte): -32,768~32,767
· nt(4byte):-2,147,483,648~2,147,483,647 (약 21억)
· double(8byte): -9,223,372,036,854,770,808~9,,23,372,036,854,770,807 (약 9백경)


2. 실수란?
· 소수점 이하의 자리가 존재하는 숫자
· 1234 = 1.234 x 10³ → 1.234는 가수, 10³에서 3은 지수, 가수와 지수로 분류하여 정규화 작업 진행
· 실수 표현할 때 사용하는 자료형: float(4Byte), double(8Byte)

 
3. Object란?
· 객체, 자바의 최상위 부모 클래스에 해당
· Object는 속성과 행위로 구성
 → 속성: Attribute, 유일한 값
 → 행위: Method, 동작들
 → ex) 사람으로 비유하면? 주민등록번호는 속성 / 걷기, 뛰기는 행위 


4. 운영체제(OS, Operating System)
· 컴퓨터나 노트북 전원을 켜면 가장 먼저 만나는 소프트웨어
· 운영체제 종류: PC > 유닉스, 윈도우, 맥OS, 리눅스 등 / 모바일 > 애플의 iOS, 구글의 안드로이드
· 운영체제의 핵심 기능
 → 프로세스 관리: CPU를 배분, 작업에 필요한 제반 환경을 제공
 → 메인메모리 관리: 작업 공간을 배치, 실제 메인메모리보다 큰 가상 공간을 제공
 → 저장 장치 관리: 데이터를 저장하고 접근할 수 있는 인터페이스 제공


5. 프로세스 관리
· 프로그램이란? 어떤 데이터를 사용하여 어떤 작업을 할지 절차를 기록해 놓은 것
· 프로세스란? 프로그램으로 작성된 작업 절차를 실제로 실행에 옮긴다는 의미 
1) 일괄 처리 작업(batch job)
· 한 번에 작업을 1개만 처리하는 시스템
2) 시분할 작업(timesharing job)
· 프로세스 여러 개가 아주 짧은 시간 동안 CPU를 사용하는 방식
· CPU는 한 번에 하나의 일만 처리하지만, 시분할 작업을 통해 동시에 일이 실행되는 것처럼 보임

※ 동기와 비동기
· 동기(Synchronous): '동시에 일어난다', 순차적으로 작업 진행, 해당 작업을 완료한 후 다음 작업 진행
· 비동기(Asynchronous): '동시에 일어나지 않는다', 작업의 완료 여부와 상관없이 다른 작업 처리, ex: Ajax


6. 파일 확장자
· 파일 구분은 확장자를 사용하고 확장자에 따라 파일 성격 구분
· 파일 이름 마지막 마침표 다음 글자를 확장자로 인식, 단 \, /, :, *, ?, “, <, >, | 등은 사용 불가

 
7. 파일과 디렉터리
· 관련 있는 파일을 하나로 모아 놓은 곳으로 여러 층으로 구성 가능
· 최상위 디렉터리 ＝ 루트 디렉터리(root directory)
· 역슬래시(＼)는 루트 디렉터리를 의미하며, 한글 자판에서 \(원화 표시)로 대체
1) 절대 경로: 최상위 루트 디렉터리인 C로부터 시작되어 경로를 전부 기입하는 방식
2) 상대 경로: 루트 디렉터리를 거치지 않고도 이동이 가능하며, 해당 위치를 기준으로 이동하는 방식


8. 컴퓨팅 사고와 4가지 구성
· 컴퓨팅 사고란? 컴퓨터를 이용하여 문제를 해결하기 위한 논리적이고 창의적인 생각 방식
· 컴퓨팅 사고의 4가지 구성
  1) 추상화: 중요한 특징만으로 문제를 구성함으로써 문제 해결을 좀 더 쉽게 하는 과정
  2) 분해: 추상화한 문제를 해결하기 쉬운 작은 단위의 문제로 나누는 과정
  3) 패턴인식: 추상화 및 분해를 한 후, 데이터에서 의미 있는 패턴을 찾아내는 과정
  4) 알고리즘: 정해진 일련의 절차나 방법을 공식화한 형태로 표현한 것


9. 알고리즘 복잡도
· 알고리즘이 특정 기준에 따라 얼마나 빠르게 또는 느리게 실행되는지 나타내는 것
· 시간 복잡도와 공간 복잡도를 분석하면 가장 효율적인 알고리즘 선택 가능
1) 시간 복잡도
· 알고리즘이 실행되어 종료될 때까지 어느 정도의 시간이 필요한지 측정하는 방법
· 실행 시간을 측정하기는 어렵기 때문에 몇 번 실행되는지 횟수를 측정
· 표현 방법으로 아래 사진과 같이 빅오 표기법(Big O notation) 그래프 사용
· 다음 두 경우를 비교하면 O(n)이 O(n²)보다 시간 복잡도가 더 좋은 알고리즘!
2) 공간 복잡도
· 문제를 해결하는 데 어느 정도의 저장 공간을 필요로 하는지 측정하는 방법
· 기억 장치 내의 공간을 얼마나 적게 사용하는지가 중요


10. 선형자료구조
· 자료구조란 무엇인가? 프로그램에서 사용할 많은 데이터를 메모리 상에서 관리하는 여러 구현 방법들
· 효율적인 자료구조가 성능 좋은 알고리즘의 기반이 되며, 수행 속도와 밀접한 관련이 있음
· 구현하려는 프로그램에 맞는 최적의 자료구조를 활용해야 하므로 자료구조에 대한 이해가 중요!
1) 배열(Array)
· 선형으로 자료를 관리, 정해진 크기의 메모리를 먼저 할당받아 사용하고, 자료의 물리적 위치와 논리적 위치가 같음
· 수행 속도: O(n)
· 장점: 연속적 / 단점: 길이 조절 불가, 데이터 삽입 불가
2) 링크드 리스트 (= 연결 리스트, LinkedList)
· 선형으로 자료를 관리, 자료가 추가될 때마다 메모리를 할당받고, 자료는 링크로 연결
· 자료의 물리적 위치와 논리적 위치가 다를 수 있음 
· 수행 속도: O(1), 검색 시간: O(n)
· 장점: 데이터 삽입과 삭제가 용이한 편
3) 스택(Stack)
· 가장 나중에 입력된 자료가 가장 먼저 출력되는 자료 구조, Last In First Out
· 사용처: 실행 취소(ctrl+Z), 연산 등
4) 큐(Queue)
· 가장 먼저 입력된 자료가 가장 먼저 출력되는 자료 구조, First In First Out
· 사용처: 콜센터 상담 대기, 은행 대기 번호표
